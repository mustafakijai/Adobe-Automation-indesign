#target "indesign"
#targetengine "session"

/*
  INWIZ_Graph_Panel_JLL_WC.jsx
  - Solid ES3-compatible panel with Pie (perfect circle), Donut, Column, Bar
  - Stroke-free shapes, JLL palette, Source Sans Pro Light labels (with fallbacks)
  - Preview + Generate/Update (selection-aware)
  - CSV mini-editor (Import/Export/Copy/Paste/Transpose + Samples)
*/

(function(){
  if(!app.documents.length){ alert("Open a document first."); return; }

  // ------------- utils (ES3-safe) -------------
  function TRIM(s){ return String(s).replace(/^\s+|\s+$/g,""); }
  function pct(s,fb){ var v=parseFloat(TRIM(String(s||"").replace("%",""))); if(isNaN(v))v=fb; if(v<1)v=1; if(v>100)v=100; return v; }
  function niceMax(v){ if(v<=0) return 1; var p=Math.pow(10,Math.floor(Math.log(v)/Math.LN10)); var n=Math.ceil(v/p),a=[1,2,5,10]; for(var i=0;i<a.length;i++) if(n<=a[i]) return a[i]*p; return 10*p; }
  function getParent(){ var w=app.activeWindow; return (w && (w.activePage||w.activeSpread)) || app.activeDocument.pages[0]; }
  function selectionBounds(){ var s=app.selection; if(s.length && s[0].hasOwnProperty("geometricBounds")) return s[0].geometricBounds; return [72,72,360,540]; }
  function squareBoundsAround(b){ var t=b[0],l=b[1],bt=b[2],r=b[3],w=r-l,h=bt-t,side=Math.min(w,h),cx=(l+r)/2,cy=(t+bt)/2; return [cy-side/2,cx-side/2,cy+side/2,cx+side/2]; }
  function ensureLayer(doc){ try{ var L=doc.layers.itemByName("INWIZ Charts"); L.name; return L; }catch(e){} return doc.layers.add({name:"INWIZ Charts"}); }
  function ensureColor(doc,name,rgb){ try{ var c=doc.colors.itemByName(name); c.name; return c; }catch(e){} return doc.colors.add({name:name,space:ColorSpace.RGB,model:ColorModel.PROCESS,colorValue:rgb}); }
  function paper(doc){ try{ return doc.swatches.itemByName("Paper"); }catch(e){} return doc.swatches.item(0); } // fallback

  // ------------- font style -------------
  function styleText(tf, size, justCenter){
    try{ tf.texts[0].appliedFont="Source Sans Pro\tLight"; }
    catch(_){ try{ tf.texts[0].appliedFont="Source Sans Pro\tRegular"; }catch(__){ try{ tf.texts[0].appliedFont="Minion Pro\tRegular"; }catch(___){} } }
    try{ tf.texts[0].pointSize=size; }catch(_){}
    try{
      // support both enum casings across versions
      tf.texts[0].justification = (justCenter===false) ? Justification.leftAlign : (Justification.CENTER_ALIGN || Justification.centerAlign);
    }catch(_){}
  }

  // ------------- colors -------------
  // Your JLL palette (edit here anytime)
  var BASE=[[167,143,129],[0,96,118],[72,145,163],[127,72,123],[90,162,104],[101,88,78],[188,117,121],[47,101,55],[174,117,169],[139,151,155]];
  // Optional: document swatch names if you want to drive colors from named swatches
  var SWATCH_NAMES=["JLL Red","Ocean","Space","Orchid","Meadow","Earth","Rose","Forest","Lilac","Dusk"];

  function paletteFromBase(doc){ var out=[],i; for(i=0;i<BASE.length;i++) out.push(ensureColor(doc,"INWIZ-"+(i+1),BASE[i])); return out; }
  function paletteFromNames(doc){
    var out=[],i,c; for(i=0;i<SWATCH_NAMES.length;i++){ try{ c=doc.colors.itemByName(SWATCH_NAMES[i]); c.name; out.push(c); }catch(e){} }
    return out;
  }
  function resolvePalette(doc, useNamed){ var sws = useNamed ? paletteFromNames(doc) : paletteFromBase(doc); if(!sws.length) sws = paletteFromBase(doc); return sws; }

  // ------------- primitives (stroke-free) -------------
  function addRect(p,lay){ var r=p.rectangles.add(); r.itemLayer=lay; r.strokeWeight=0; return r; }
  function addPoly(p,lay){ var g=p.polygons.add(); g.itemLayer=lay; g.strokeWeight=0; return g; }
  function addOval(p,lay){ var o=p.ovals.add(); o.itemLayer=lay; o.strokeWeight=0; return o; }
  function addText(p,lay){ var t=p.textFrames.add(); t.itemLayer=lay; return t; }

  // ------------- CSV -> data -------------
  function csvToData(csv){
    var lines=String(csv||"").replace(/\r/g,"\n").split(/\n+/), i, arr=[], s;
    function split(line){ var p=String(line).split(/,(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/), k; for(k=0;k<p.length;k++) p[k]=p[k].replace(/^\"|\"$/g,"").replace(/\"\"/g,'"'); return p; }
    for(i=0;i<lines.length;i++){ s=TRIM(lines[i]); if(s.length) arr.push(split(s)); }
    if(arr.length<2 || arr[0].length<2) throw Error("Need header + at least 1 row.");
    var cats=[], names=[], S=[], r,c,v;
    for(c=1;c<arr[0].length;c++) names.push(arr[0][c]);
    for(r=1;r<arr.length;r++) cats.push(arr[r][0]);
    for(c=1;c<arr[0].length;c++){ var col=[]; for(r=1;r<arr.length;r++){ v=parseFloat(TRIM(arr[r][c])); col.push(isNaN(v)?0:v); } S.push(col); }
    return {categories:cats, seriesNames:names, series:S};
  }

  // ------------- legend (optional) -------------
  function legendRow(p,lay,x,y,labels,sws){
    var it=[], cx=x, gap=10, i, chip, tf;
    for(i=0;i<labels.length;i++){
      chip=addRect(p,lay); chip.geometricBounds=[y,cx,y+8,cx+14]; chip.fillColor=sws[i%sws.length];
      it.push(chip);
      tf=addText(p,lay); tf.geometricBounds=[y-2,cx+18,y+10,cx+220]; tf.contents=labels[i]; styleText(tf,9,false); it.push(tf);
      cx += 18 + (tf.geometricBounds[3]-tf.geometricBounds[1]) + gap;
    }
    return it;
  }

  // ------------- PIE / DONUT (perfect circle) -------------
  function arcPoints(cx,cy,r,a0,a1){
    var RAD=Math.PI/180, steps=Math.max(60, Math.round((a1-a0)/2)), pts=[[cx,cy]], k, ang;
    for(k=0;k<=steps;k++){ ang=a0+(a1-a0)*(k/steps); pts.push([cx+r*Math.cos(ang*RAD), cy+r*Math.sin(ang*RAD)]); }
    pts.push([cx,cy]); return pts;
  }
  function pieItems(p,lay,b,d,sws,startAngle,labelDist,legendTop){
    var cats=d.categories, S=d.series, vals=[], i,s;
    if(S.length===1){ vals=S[0].slice(0); } else { for(i=0;i<cats.length;i++){ var sum=0; for(s=0;s<S.length;s++) sum+=S[s][i]; vals.push(sum); } }
    var total=0; for(i=0;i<vals.length;i++) total+=Math.max(0,vals[i]); if(total<=0) total=1;

    var cx=(b[1]+b[3])/2, cy=(b[0]+b[2])/2, R=Math.min((b[3]-b[1]),(b[2]-b[0]))*0.48;
    var it=[], start=isNaN(startAngle)?-90:startAngle, end, pct, mid, lx, ly, tf;

    if(legendTop){ it=it.concat(legendRow(p,lay,b[1],b[0]-14,d.seriesNames,sws)); }

    for(i=0;i<vals.length;i++){
      pct=(vals[i]/total)*100; end=start+(pct/100)*360;

      var poly=addPoly(p,lay);
      poly.paths[0].entirePath=arcPoints(cx,cy,R,start,end);
      poly.fillColor=sws[i%sws.length]; it.push(poly);

      mid=(start+end)/2;
      lx=cx+(R+(isNaN(labelDist)?18:labelDist))*Math.cos(Math.PI/180*mid);
      ly=cy+(R+(isNaN(labelDist)?18:labelDist))*Math.sin(Math.PI/180*mid);
      tf=addText(p,lay); tf.geometricBounds=[ly-8,lx-60,ly+8,lx+60];
      tf.contents=(cats[i]||("Slice "+(i+1)))+" â€” "+Math.round(pct)+"%"; styleText(tf,9,true); it.push(tf);

      start=end;
    }
    return it;
  }
  function donutItems(p,lay,b,d,sws,startAngle,labelDist,legendTop,innerPct){
    var it=pieItems(p,lay,b,d,sws,startAngle,labelDist,legendTop);
    var cx=(b[1]+b[3])/2, cy=(b[0]+b[2])/2, R=Math.min((b[3]-b[1]),(b[2]-b[0]))*0.48;
    var rInner=R*((isNaN(innerPct)?50:innerPct)/100);
    var hole=addOval(p,lay); hole.geometricBounds=[cy-rInner, cx-rInner, cy+rInner, cx+rInner]; hole.fillColor=paper(app.activeDocument); it.push(hole);
    return it;
  }

  // ------------- COLUMN / BAR (stroke-free) -------------
  function columnItems(p,lay,b,d,sws,axisLeft,colPct,cluPct,legendTop,showValues){
    var cats=d.categories, S=d.series, names=d.seriesNames, sCnt=S.length, cCnt=cats.length, i,s,max=0;
    for(s=0;s<sCnt;s++) for(i=0;i<cCnt;i++) if(S[s][i]>max) max=S[s][i]; max=niceMax(max);
    var it=[], t=b[0], l=b[1], bt=b[2], r=b[3], W=r-l, H=bt-t;
    if(legendTop){ it=it.concat(legendRow(p,lay,l,t-14,names,sws)); t+=20; H=bt-t; }
    var span=W/cCnt, clu=span*(cluPct/100), cw=(clu/sCnt)*(colPct/100), left,x,h,rect,tf;

    for(i=0;i<cCnt;i++){
      left=l+i*span+(span-clu)/2;
      for(s=0;s<sCnt;s++){
        h=(S[s][i]/max)*H; x=left+s*(clu/sCnt)+((clu/sCnt)-cw)/2;
        rect=addRect(p,lay); rect.geometricBounds=[bt-h,x,bt,x+cw]; rect.fillColor=sws[s%sws.length]; it.push(rect);
        if(showValues){ tf=addText(p,lay); tf.geometricBounds=[bt-h-10,x,bt-h+10,x+cw]; tf.contents=String(S[s][i]); styleText(tf,8,true); it.push(tf); }
      }
      tf=addText(p,lay); tf.geometricBounds=[bt+2,left,bt+14,left+clu]; tf.contents=String(cats[i]); styleText(tf,9,true); it.push(tf);
    }
    return it;
  }
  function barItems(p,lay,b,d,sws,axisLeft,colPct,cluPct,legendTop,showValues){
    var cats=d.categories, S=d.series, names=d.seriesNames, sCnt=S.length, cCnt=cats.length, i,s,max=0;
    for(s=0;s<sCnt;s++) for(i=0;i<cCnt;i++) if(S[s][i]>max) max=S[s][i]; max=niceMax(max);
    var it=[], t=b[0], l=b[1], bt=b[2], r=b[3], W=r-l, H=bt-t;
    if(legendTop){ it=it.concat(legendRow(p,lay,l,t-14,names,sws)); t+=20; H=bt-t; }
    var span=H/cCnt, clu=span*(cluPct/100), bh=(clu/sCnt)*(colPct/100), top,y0,w,rect,tf;

    for(i=0;i<cCnt;i++){
      top=t+i*span+(span-clu)/2;
      for(s=0;s<sCnt;s++){
        w=(S[s][i]/max)*W; y0=top+s*(clu/sCnt)+((clu/sCnt)-bh)/2;
        rect=addRect(p,lay); rect.geometricBounds=[y0,l,y0+bh,l+w]; rect.fillColor=sws[s%sws.length]; it.push(rect);
        if(showValues){ tf=addText(p,lay); tf.geometricBounds=[y0-2,l+w-22,y0+12,l+w+60]; tf.contents=String(S[s][i]); styleText(tf,8,false); it.push(tf); }
      }
      tf=addText(p,lay); tf.geometricBounds=[top,r+6,top+clu,r+120]; tf.contents=String(cats[i]); styleText(tf,9,true); it.push(tf);
    }
    return it;
  }

  // ------------- render registry -------------
  function drawChart(kind, p, lay, b, d, sws, P){
    if(kind==="Pie"){ return pieItems(p,lay,squareBoundsAround(b),d,sws,P.startAngle,P.labelDist,P.legendTop); }
    if(kind==="Donut"){ return donutItems(p,lay,squareBoundsAround(b),d,sws,P.startAngle,P.labelDist,P.legendTop,P.donutInner); }
    if(kind==="Column"){ return columnItems(p,lay,b,d,sws,P.axisLeft,P.colPct,P.cluPct,P.legendTop,P.showValues); }
    if(kind==="Bar"){ return barItems(p,lay,b,d,sws,P.axisLeft,P.colPct,P.cluPct,P.legendTop,P.showValues); }
    throw Error("Unknown chart type: "+kind);
  }

  // ------------- persist -------------
  var PREF="INWIZ_";
  function saveCfg(grp,P){ grp.insertLabel(PREF+"has","1"); for(var k in P) if(P.hasOwnProperty(k)) grp.insertLabel(PREF+k,String(P[k])); }
  function loadCfg(grp){
    if(grp.extractLabel(PREF+"has")!=="1") return null;
    function asNum(s,fb){ var n=parseFloat(s); return isNaN(n)?fb:n; }
    function asBool(s){ return String(s)==="1"||String(s).toLowerCase()==="true"; }
    var btxt=grp.extractLabel(PREF+"bounds"), b=btxt?btxt.split(","):null, i;
    if(b&&b.length===4) for(i=0;i<4;i++) b[i]=parseFloat(b[i]);
    return {
      chartType: grp.extractLabel(PREF+"chartType")||"Column",
      axisLeft:  asBool(grp.extractLabel(PREF+"axisLeft")||"1"),
      legendTop: asBool(grp.extractLabel(PREF+"legendTop")||"0"),
      showValues:asBool(grp.extractLabel(PREF+"showValues")||"0"),
      colPct:    asNum(grp.extractLabel(PREF+"colPct"),90),
      cluPct:    asNum(grp.extractLabel(PREF+"cluPct"),80),
      useNamed:  asBool(grp.extractLabel(PREF+"useNamed")||"0"),
      startAngle:asNum(grp.extractLabel(PREF+"startAngle"),-90),
      labelDist: asNum(grp.extractLabel(PREF+"labelDist"),18),
      donutInner:asNum(grp.extractLabel(PREF+"donutInner"),50),
      bounds:    b || grp.geometricBounds,
      dataText:  grp.extractLabel(PREF+"dataText") || ""
    };
  }

  // ------------- data dialog -------------
  var dataCSV="";
  function openDataDialog(initialCSV){
    var dlg=new Window("dialog","Graph Data"); dlg.orientation="column"; dlg.alignChildren="fill"; dlg.margins=8;
    dlg.add("statictext",undefined,"Row 0 = series; Col 0 = categories. Numbers only.");
    var wrap=dlg.add("panel"); wrap.orientation="column"; wrap.alignChildren="left"; wrap.preferredSize.height=260; wrap.margins=6;

    var grid={ rows:10, cols:10, cells:[], firstColW:120, cellW:70 };
    grid.build=function(){ while(wrap.children.length) wrap.remove(wrap.children[0]); grid.cells=[]; var r,c,row,w,ed;
      for(r=0;r<this.rows;r++){ row=wrap.add("group"); row.orientation="row"; grid.cells[r]=[];
        for(c=0;c<this.cols;c++){ w=(c===0)?this.firstColW:this.cellW; ed=row.add("edittext",undefined,"",{characters:Math.round(w/7)}); ed.preferredSize=[w,20]; grid.cells[r][c]=ed; } }
      dlg.layout.layout(true);
    };
    grid.matrix=function(){ var m=[],r,c; for(r=0;r<this.rows;r++){ m[r]=[]; for(c=0;c<this.cols;c++) m[r][c]=String(this.cells[r][c].text||""); } return m; };
    grid.setFromMatrix=function(m){ this.rows=Math.max(2,m.length); this.cols=Math.max(2,(m[0]?m[0].length:2)); this.build(); for(var r=0;r<m.length;r++) for(var c=0;c<m[r].length;c++) this.cells[r][c].text=String(m[r][c]); };
    grid.toCSV=function(){ var m=this.matrix(), out=[], r,c,row; for(r=0;r<m.length;r++){ row=[]; for(c=0;c<m[r].length;c++){ var v=String(m[r][c]); if(v.indexOf(",")>=0||v.indexOf('"')>=0) v='"'+v.replace(/"/g,'""')+'"'; row.push(v);} out.push(row.join(",")); } return out.join("\n"); };
    grid.fromCSV=function(csv){ var lines=String(csv||"").replace(/\r/g,"\n").split(/\n+/).filter(function(s){return TRIM(s).length>0;}); function split(line){ var p=String(line).split(/,(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/); for(var i=0;i<p.length;i++) p[i]=p[i].replace(/^\"|\"$/g,"").replace(/\"\"/g,'"'); return p;} if(!lines.length)return; var m=[],i; for(i=0;i<lines.length;i++) m.push(split(lines[i])); this.setFromMatrix(m); };
    grid.transpose=function(){ var m=this.matrix(), tm=[],r,c; for(c=0;c<this.cols;c++){ tm[c]=[]; for(r=0;r<this.rows;r++) tm[c][r]=m[r][c]; } this.setFromMatrix(tm); };

    var bar=dlg.add("group"); bar.orientation="row";
    function B(label,fn){ var b=bar.add("button",undefined,label); b.onClick=fn; return b; }
    B("â€“ Row",function(){ if(grid.rows>2){ grid.rows--; grid.build(); } });
    B("+ Row",function(){ grid.rows++; grid.build(); });
    B("â€“ Col",function(){ if(grid.cols>2){ grid.cols--; grid.build(); } });
    B("+ Col",function(){ grid.cols++; grid.build(); });
    B("Paste",function(){ var d=new Window("dialog","Paste CSV"); var ed=d.add("edittext",undefined,"",{multiline:true,scrollable:true}); ed.preferredSize=[420,200]; d.add("button",undefined,"Cancel"); var okb=d.add("button",undefined,"OK"); if(d.show()==1){ grid.fromCSV(ed.text); } });
    B("Copy",function(){ var d=new Window("dialog","Copy CSV"); d.add("edittext",undefined,grid.toCSV(),{multiline:true,readonly:true,scrollable:true}).preferredSize=[420,200]; d.add("button",undefined,"Close"); d.show(); });
    B("Import",function(){ var f=File.openDialog("CSV"); if(f){ f.open("r"); var s=f.read(); f.close(); grid.fromCSV(s);} });
    B("Export",function(){ var f=File.saveDialog("Save CSV","CSV:*.csv"); if(f){ f.open("w"); f.write(grid.toCSV()); f.close(); } });
    B("Transpose",function(){ grid.transpose(); });
    B("Sample",function(){ grid.fromCSV(",Series A,Series B,Series C\nCat 1,10,20,15\nCat 2,30,25,18\nCat 3,22,17,29\nCat 4,18,34,26"); });
    B("Sample Pie",function(){ grid.fromCSV(",Share\nRetail,35\nOffice,25\nHospitality,20\nIndustrial,20"); });
    B("Clear",function(){ grid.setFromMatrix([["","S1","S2"],["Cat 1","",""],["Cat 2","",""]]); });

    var act=dlg.add("group"); act.alignment="right"; act.add("button",undefined,"Cancel"); var ok=act.add("button",undefined,"OK");
    grid.build(); if(initialCSV) grid.fromCSV(initialCSV);
    return (dlg.show()==1) ? grid.toCSV() : null;
  }

  // ------------- panel UI -------------
  var dlg=new Window("dialog","INWIZ Graph (JLL)"); dlg.orientation="column"; dlg.alignChildren="fill"; dlg.margins=10;

  var menu=dlg.add("dropdownlist",undefined,["Graph Options â–¾","Edit Dataâ€¦","Sample Data","Sample Pie","Clear Data","Import CSVâ€¦","Export CSVâ€¦"]); menu.selection=0;
  menu.onChange=function(){
    if(menu.selection.index<=0){menu.selection=0;return;}
    var idx=menu.selection.index;
    if(idx===1){ var n=openDataDialog(dataCSV); if(n!==null) dataCSV=n; }
    if(idx===2){ dataCSV=",Series A,Series B,Series C\nCat 1,10,20,15\nCat 2,30,25,18\nCat 3,22,17,29\nCat 4,18,34,26"; }
    if(idx===3){ dataCSV=",Share\nRetail,35\nOffice,25\nHospitality,20\nIndustrial,20"; }
    if(idx===4){ dataCSV=""; }
    if(idx===5){ var f=File.openDialog("CSV"); if(f){ f.open("r"); dataCSV=f.read(); f.close(); } }
    if(idx===6){ var f2=File.saveDialog("Save CSV","CSV:*.csv"); if(f2){ f2.open("w"); f2.write(dataCSV||""); f2.close(); } }
    menu.selection=0;
  };

  var typeP=dlg.add("panel",undefined,"Type & Palette"); typeP.alignChildren="left"; typeP.margins=8;
  var typeRow=typeP.add("group"); typeRow.orientation="row"; typeRow.spacing=6;
  var types=["Pie","Donut","Column","Bar"], rb=[], i;
  for(i=0;i<types.length;i++){ rb[i]=typeRow.add("radiobutton",undefined,types[i]); rb[i].size=[90,18]; }
  rb[0].value=true;

  var palRow=typeP.add("group");
  var ckNamed=palRow.add("checkbox",undefined,"Use Named Swatches (if present)");

  var optP=dlg.add("panel",undefined,"Options"); optP.alignChildren="left"; optP.margins=8;
  var g1=optP.add("group"); g1.add("statictext",undefined,"Legend on Top:"); var ckLegend=g1.add("checkbox",undefined,""); ckLegend.value=false;
  var g2=optP.add("group"); g2.add("statictext",undefined,"Show Values (bar/column):"); var ckValues=g2.add("checkbox",undefined,""); ckValues.value=false;

  var g3=optP.add("group"); g3.add("statictext",undefined,"Column/Bar Width:"); var etCol=g3.add("edittext",undefined,"90%"); etCol.characters=5;
  var g4=optP.add("group"); g4.add("statictext",undefined,"Cluster Width:"); var etClu=g4.add("edittext",undefined,"80%"); etClu.characters=5;

  var g5=optP.add("group"); g5.add("statictext",undefined,"Pie Start Angle:"); var etAng=g5.add("edittext",undefined,"-90"); etAng.characters=5;
  var g6=optP.add("group"); g6.add("statictext",undefined,"Pie Label Distance:"); var etLbl=g6.add("edittext",undefined,"18"); etLbl.characters=5;
  var g7=optP.add("group"); g7.add("statictext",undefined,"Donut Inner %:"); var etDon=g7.add("edittext",undefined,"50%"); etDon.characters=5;

  function currentType(){ for(i=0;i<rb.length;i++) if(rb[i].value) return rb[i].text; return "Pie"; }

  // restore if selection is INWIZ group
  var saved=null; if(app.selection.length && app.selection[0].extractLabel){ saved=(function(g){ if(g.extractLabel("INWIZ_has")!=="1") return null; return loadCfg(g); })(app.selection[0]); }
  if(saved){
    for(i=0;i<types.length;i++) rb[i].value=(types[i]===saved.chartType);
    ckLegend.value=saved.legendTop; ckValues.value=saved.showValues; ckNamed.value=saved.useNamed;
    etCol.text=saved.colPct+"%"; etClu.text=saved.cluPct+"%"; etAng.text=String(saved.startAngle); etLbl.text=String(saved.labelDist); etDon.text=String(saved.donutInner)+"%";
    dataCSV=saved.dataText||dataCSV;
  }

  function params(){
    return {
      chartType: currentType(),
      legendTop: ckLegend.value,
      showValues: ckValues.value,
      colPct: pct(etCol.text,90),
      cluPct: pct(etClu.text,80),
      useNamed: ckNamed.value,
      startAngle: (function(){ var v=parseFloat(TRIM(etAng.text)); return isNaN(v)?-90:v; })(),
      labelDist: (function(){ var v=parseFloat(TRIM(etLbl.text)); return isNaN(v)?18:v; })(),
      donutInner: pct(etDon.text,50),
      bounds: selectionBounds(),
      dataText: dataCSV || ",Series A,Series B\nCat 1,10,20\nCat 2,30,25"
    };
  }

  function runDraw(P, updateSelection){
    var doc=app.activeDocument, lay=ensureLayer(doc), sws=resolvePalette(doc,P.useNamed), parent=getParent(), data;
    try{ data=csvToData(P.dataText); }catch(e){ alert("Data error: "+e.message); return; }

    app.doScript(function(){
      var items, grp, b=P.bounds.slice(0);
      items = drawChart(P.chartType, parent, lay, b, data, sws, P);
      if(updateSelection && app.selection.length && app.selection[0].extractLabel && app.selection[0].extractLabel("INWIZ_has")==="1"){
        grp=app.selection[0];
        P.bounds=grp.geometricBounds;
        while(grp.allPageItems.length){ try{ grp.allPageItems[0].remove(); }catch(_){ break; } }
        var itemsU = drawChart(P.chartType, parent, lay, P.bounds.slice(0), data, sws, P);
        var i; for(i=0;i<itemsU.length;i++){ try{ itemsU[i].move(grp,LocationOptions.AT_END); }catch(__){} }
        saveCfg(grp,P);
      }else{
        grp=parent.groups.add(items); grp.itemLayer=lay; saveCfg(grp,P);
      }
    }, ScriptLanguage.JAVASCRIPT, undefined, UndoModes.ENTIRE_SCRIPT, "INWIZ Draw");
    try{ app.redraw(); }catch(_){}
  }

  var act=dlg.add("group"); act.alignment="right";
  act.add("button",undefined,"Cancel");
  var preview=act.add("button",undefined,"Preview");
  var ok=act.add("button",undefined,"Generate/Update");

  preview.onClick=function(){ runDraw(params(), false); };
  ok.onClick=function(){ runDraw(params(), true); dlg.close(1); };

  if(dlg.show()!=1) return;
})();