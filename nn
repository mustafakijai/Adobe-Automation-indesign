/*  InWiz — Export Master Word (CLEAN)
    v2.0 — page-sequenced, minimal instructions, no decorations
    Author: ChatGPT for Mr khan
*/
(function () {
  // ===== SETTINGS (edit if needed) =====
  var INCLUDE_MASTER_ITEMS = false;  // keep it simple: ignore master items
  var ONLY_NONEMPTY_LABELS = true;   // skip items with empty .label
  var ALLOW_TABLES        = true;    // true: include Tables (as TEXT blocks)

  // ===== INPUT CHOICE =====
  var files = pickManyINDD(); // try multi-select first
  if (!files) {
    var folder = Folder.selectDialog("Pick a folder with .indd/.indt (Cancel = use OPEN docs)");
    if (folder) files = listINDDInFolder(folder, false);
    else if (hasDocs()) files = "__OPEN__";
    else { alert("No files chosen and no documents open."); return; }
  }

  // ===== OUTPUT =====
  var outFile = File.saveDialog("Save MASTER Word (.doc or .rtf)", "*.doc");
  if (!outFile) return;
  if (!/\.(doc|rtf)$/i.test(outFile.name)) outFile = new File(outFile.fsName + ".doc");

  // ===== COLLECT =====
  var rows = []; // {docName, docSlug, pageAbs, pageUI, y1,x1, tag, isText}
  var opened = [];

  if (files === "__OPEN__") {
    for (var d = 0; d < app.documents.length; d++) try { harvestDoc(app.documents[d], rows); } catch(_){}
  } else {
    for (var i = 0; i < files.length; i++) {
      var f = files[i]; if (!(f instanceof File)) continue;
      var docOpened = null;
      try {
        docOpened = app.open(f, false); // no window
        opened.push(docOpened);
        harvestDoc(docOpened, rows);
      } catch(e){}
    }
    for (var c=0; c<opened.length; c++) try { opened[c].close(SaveOptions.NO); } catch(_){}
  }

  if (!rows.length){ alert("No labeled text/table items found."); return; }

  // ===== ORDER: doc -> pageAbs -> Y(top) -> X(left) -> tag =====
  rows.sort(function(a,b){
    if (a.docSlug !== b.docSlug) return (a.docSlug < b.docSlug ? -1 : 1);
    if (a.pageAbs !== b.pageAbs) return a.pageAbs - b.pageAbs;
    if (a.y1 !== b.y1)           return a.y1 - b.y1; // top to bottom
    if (a.x1 !== b.x1)           return a.x1 - b.x1; // left to right
    return (a.tag < b.tag ? -1 : 1);
  });

  // ===== BUILD MINIMAL RTF =====
  var r = [];
  r.push("{\\rtf1\\ansi\\deff0{\\fonttbl{\\f0 Arial;}{\\f1 Courier New;}}");

  // Header: tiny, clear
  r.push("\\fs32\\b INWIZ — Master Word (CLEAN)\\b0\\fs20\\par");
  r.push("Generated: " + enc(ts()) + "\\par\\par");

  // One-time baby-simple how-to
  r.push("\\fs22\\b How to fill\\b0\\fs20\\par");
  r.push("1) Type your text ONLY between the two bracket lines.\\par");
  r.push("2) For IMAGES, paste the FULL file path instead of the example.\\par");
  r.push("3) Do not delete bracket lines.\\par\\par");

  // Group by document then page
  var byDoc = groupBy(rows, function(x){ return x.docSlug; });
  var docSlugs = keysOf(byDoc);

  for (var d2=0; d2<docSlugs.length; d2++){
    var slug = docSlugs[d2], setDoc = byDoc[slug], docName = setDoc[0].docName;

    // Document title
    r.push("\\fs26\\b " + enc(docName) + " \\b0\\fs20\\par\\par");

    var byPage = groupBy(setDoc, function(x){ return x.pageAbs + "|" + x.pageUI; });
    var pageKeys = numericPageKeys(keysOf(byPage)); // sort by numeric pageAbs

    for (var p=0; p<pageKeys.length; p++){
      var key = pageKeys[p];
      var arr = byPage[key];
      var ui  = arr[0].pageUI;
      var abs = arr[0].pageAbs;

      r.push("\\fs22\\b Page " + enc(ui) + " (P"+ pad(abs,3) + ")\\b0\\fs20\\par");

      for (var i2=0; i2<arr.length; i2++){
        var it = arr[i2];
        var kind = it.isText ? "TEXT" : "IMAGE";

        // Simple per-tag block with PAGE marker
        r.push("\\f1 ["+ enc(it.tag) + "]\\f0  — Page: " + enc(ui) + "\\par");
        r.push((it.isText ? "type here…" : "/full/path/to/image.jpg") + "\\par");
        r.push("\\f1 [/"+ enc(it.tag) + "]\\f0\\par\\par");
      }
      r.push("\\par");
    }

    if (d2 < docSlugs.length-1) r.push("\\page");
  }

  r.push("}");

  // Write file
  try { writeText(outFile, r.join("")); alert("Done. Tags exported cleanly."); }
  catch(e){ alert("Write failed: " + e.message); }

  // ===== Helpers =====
  function hasDocs(){ try { return app.documents.length>0; } catch(_){ return false; } }
  function pickManyINDD(){
    try{
      var filt=function(f){ return (f instanceof Folder) || /\.(indd|indt)$/i.test(f.name); };
      var res = File.openDialog("Select .indd/.indt (multi-select OK)", filt, true);
      if (!res || !res.length) return null;
      var out=[]; for (var i=0;i<res.length;i++) if (res[i] instanceof File) out.push(res[i]);
      return out.length ? out : null;
    }catch(_){ return null; }
  }
  function listINDDInFolder(folder, recurse){
    var out=[], list=folder.getFiles();
    for (var i=0;i<list.length;i++){
      var it=list[i];
      if (it instanceof File && /\.(indd|indt)$/i.test(it.name)) out.push(it);
      else if (recurse && it instanceof Folder) out = out.concat(listINDDInFolder(it, true));
    }
    return out;
  }

  function harvestDoc(doc, sink){
    var docName = safeDocName(doc), slug = docSlug(docName);
    // pages only (masters optional)
    for (var p=0; p<doc.pages.length; p++){
      var pg = doc.pages[p]; if (!isValid(pg)) continue;
      var pageAbs = (p+1), pageUI = pUI(pg);

      var items = []; try { items = pg.allPageItems; } catch(_){}
      for (var i=0; i<items.length; i++){
        var it = items[i]; if (!isValid(it)) continue;
        var T = iType(it);
        if (T==="TextFrame" || (ALLOW_TABLES && T==="Table")){
          var L = labelOf(it); if (ONLY_NONEMPTY_LABELS && !L) continue;
          var tag = pickTag(L); if (!tag) continue;

          var gb = bounds(it);
          sink.push({
            docName: docName,
            docSlug: slug,
            pageAbs: pageAbs,
            pageUI:  pageUI,
            y1: (gb?gb[0]:0),
            x1: (gb?gb[1]:0),
            tag: tag,
            isText: true // we export as TEXT blocks only (clean)
          });
        }
      }
    }

    if (!INCLUDE_MASTER_ITEMS) return;
    if (!doc.masterSpreads || !doc.masterSpreads.length) return;

    for (var ms=0; ms<doc.masterSpreads.length; ms++){
      var msp = doc.masterSpreads[ms]; if (!isValid(msp)) continue;
      for (var mp=0; mp<msp.pages.length; mp++){
        var mPage = msp.pages[mp]; if (!isValid(mPage)) continue;
        var pageUI = "MASTER-" + pUI(mPage);

        var mitems = []; try { mitems = mPage.allPageItems; } catch(_){}
        for (var k=0; k<mitems.length; k++){
          var mit = mitems[k]; if (!isValid(mit)) continue;
          var TT = iType(mit);
          if (TT==="TextFrame" || (ALLOW_TABLES && TT==="Table")){
            var L2 = labelOf(mit); if (ONLY_NONEMPTY_LABELS && !L2) continue;
            var tag2 = pickTag(L2); if (!tag2) continue;
            var gb2 = bounds(mit);
            sink.push({
              docName: docName,
              docSlug: slug,
              pageAbs: 0,
              pageUI:  pageUI,
              y1: (gb2?gb2[0]:0),
              x1: (gb2?gb2[1]:0),
              tag: tag2,
              isText: true
            });
          }
        }
      }
    }
  }

  // --- Tag rule (simple, robust) ---
  function pickTag(label){
    if (!label) return null;
    var m = /(?:^|[|;])(?:TAG|WordTag|WTag)\s*=\s*([A-Za-z0-9_\-]+)/i.exec(label);
    if (m && m[1]) return m[1];
    var s = String(label).replace(/\s+\b(TEXT|IMAGE)\b\s*$/i, "");
    s = s.replace(/_+(TEXT|IMAGE)$/i, "");
    var m2 = /(.*?_\d+)(?:[_().A-Za-z].*)?$/i.exec(s);
    if (m2 && m2[1]) s = m2[1];
    s = s.replace(/[^A-Za-z0-9_\-]+/g,"_").replace(/^_+|_+$/g,"").replace(/_{2,}/g,"_");
    return s.slice(0,64) || null;
  }

  // --- Utils ---
  function isValid(o){ try { return o && o.isValid===true; } catch(_){ return false; } }
  function iType(o){ try { if (o.reflect && o.reflect.name) return String(o.reflect.name); } catch(_){}
                    try { return String(o.constructor.name||"PageItem"); } catch(__){ return "PageItem"; } }
  function labelOf(o){ try { return String(o.label||"").trim(); } catch(_){ return ""; } }
  function bounds(o){
    try { var b = o.visibleBounds || o.geometricBounds; if (b && b.length===4) return b; } catch(_){}
    return [0,0,0,0];
  }
  function pUI(p){ try { return String(p.name); } catch(_){ return "Unknown"; } }
  function safeDocName(d){ try { return d.name; } catch(_){ return "(document)"; } }
  function docSlug(nm){ return String(nm).replace(/\.[^.]+$/,"").replace(/[^A-Za-z0-9_]/g,"_").slice(0,64) || "DOC"; }
  function writeText(f, txt){ f.encoding="UTF-8"; f.lineFeed="Windows"; if (f.exists) f.remove(); if (!f.parent.exists) f.parent.create(); f.open("w"); f.write(txt); f.close(); }
  function enc(s){
    s = String(s);
    var out=[], ch, code;
    for (var i=0;i<s.length;i++){
      ch=s.charAt(i); code=s.charCodeAt(i);
      if (ch==="\\") out.push("\\\\");
      else if (ch==="{") out.push("\\{");
      else if (ch==="}") out.push("\\}");
      else if (code>127) out.push("\\u"+(code>32767?code-65536:code)+"?");
      else if (ch==="\r"||ch==="\n") out.push("\\line ");
      else out.push(ch);
    }
    return out.join("");
  }
  function ts(){ var d=new Date(); function t(n){return (n<10?"0":"")+n;} return d.getFullYear()+"-"+t(d.getMonth()+1)+"-"+t(d.getDate())+" "+t(d.getHours())+":"+t(d.getMinutes()); }
  function pad(n,w){ var s=String(n); while(s.length<w) s="0"+s; return s; }
  function groupBy(arr,fn){ var m={}; for (var i=0;i<arr.length;i++){ var k=fn(arr[i]); (m[k]||(m[k]=[])).push(arr[i]); } return m; }
  function keysOf(o){ var a=[]; for (var k in o) if (o.hasOwnProperty(k)) a.push(k); a.sort(); return a; }
  function numericPageKeys(keys){
    // keys are "abs|UI" — sort by abs numerically, masters (0) first
    return keys.sort(function(A,B){
      var a = parseInt(A.split("|")[0],10), b = parseInt(B.split("|")[0],10);
      if (a!==b) return a-b;
      return (A<B?-1:1);
    });
  }
})();