/* INWIZ_GraphType_Panel_v4_0_Mini_PIE_PRO.jsx
   Tiny Illustrator-style dialog for InDesign (updates selection)
   - Pie chart FIXED: percent labels, always sums to 100
   - Stroke-free shapes (bars/columns/areas/pie)
   - Easy color editing section
*/

#target "indesign"
(function () {
  if (!app.documents.length) { alert("Open a document first."); return; }

  // ---------- helpers ----------
  function TRIM(s){return String(s).replace(/^\s+|\s+$/g,"");}
  function pct(s,fb){var v=parseFloat(TRIM(String(s||"").replace("%",""))); if(isNaN(v))v=fb; if(v<1)v=1; if(v>100)v=100; return v;}
  function niceMax(v){ if(v<=0) return 1; var p=Math.pow(10,Math.floor(Math.log(v)/Math.LN10)); var n=Math.ceil(v/p),a=[1,2,5,10]; for(var i=0;i<a.length;i++)if(n<=a[i])return a[i]*p; return 10*p; }
  function selectionBounds(){ var s=app.selection; if(s.length && s[0].hasOwnProperty("geometricBounds")){ try{return s[0].geometricBounds;}catch(e){} } return [72,72,360,540]; }
  function ensureLayer(doc){ try{var L=doc.layers.itemByName("INWIZ Charts"); L.name; return L;}catch(e){} return doc.layers.add({name:"INWIZ Charts"}); }
  function ensureColor(doc,name,rgb){ var c; try{ c=doc.colors.itemByName(name); c.name; }catch(e){} if(!c||!c.isValid) c=doc.colors.add({name:name,space:ColorSpace.RGB,model:ColorModel.PROCESS,colorValue:rgb}); return c; }

  // ====== COLOR SECTION (edit here to change chart colors) ======
  // Put your RGB swatches (0–255) in BASE; script will create INWIZ-1..n if not present.
  var BASE=[[167,143,129],[0,96,118],[72,145,163],[241,196,15],[127,72,123],[230,126,34],[26,188,156],[231,76,60],[52,73,94],[127,140,141]];
  function palette(doc){
    var out=[], i; 
    for(i=0;i<BASE.length;i++) out.push(ensureColor(doc,"INWIZ-"+(i+1),BASE[i]));
    return out;
  }
  // ===============================================================

  function getParent(){ var w=app.activeWindow; return (w && (w.activePage||w.activeSpread)) || app.activeDocument.pages[0]; }

  // primitives (stroke-free)
  function addRect(p,lay,pr){ var r=p.rectangles.add(pr||{}); r.itemLayer=lay; r.strokeWeight=0; return r; }
  function addLine(p,lay,pr){ var l=p.graphicLines.add(pr||{}); l.itemLayer=lay; l.strokeWeight=0; return l; }
  function addText(p,lay,pr){ var t=p.textFrames.add(pr||{}); t.itemLayer=lay; return t; }
  function addPoly(p,lay,pr){ var g=p.polygons.add(pr||{}); g.itemLayer=lay; g.strokeWeight=0; return g; }
  function setRectStyle(r, sw){ r.fillColor=sw; r.strokeWeight=0; }

  // ---------- data dialog ----------
  var dataCSV = ""; // session memory
  function openDataDialog(initialCSV){
    var dlg = new Window("dialog","Graph Data"); dlg.orientation="column"; dlg.alignChildren="fill"; dlg.margins=8;
    dlg.add("statictext",undefined,"Row 0 = series; Col 0 = categories. Numbers only.");
    var wrap=dlg.add("panel"); wrap.orientation="column"; wrap.alignChildren="left"; wrap.preferredSize.height=260; wrap.margins=6;

    var grid={ rows:10, cols:10, cells:[], firstColW:120, cellW:70, lastCSV:"",
      build:function(){ while(wrap.children.length) wrap.remove(wrap.children[0]); grid.cells=[];
        for(var r=0;r<this.rows;r++){ var row=wrap.add("group"); row.orientation="row"; grid.cells[r]=[];
          for(var c=0;c<this.cols;c++){ var w=(c===0)?this.firstColW:this.cellW; var ed=row.add("edittext",undefined,"",{characters:Math.round(w/7)}); ed.preferredSize=[w,20]; grid.cells[r][c]=ed; } }
        dlg.layout.layout(true);
      },
      matrix:function(){ var m=[],r,c; for(r=0;r<this.rows;r++){ m[r]=[]; for(c=0;c<this.cols;c++) m[r][c]=String(this.cells[r][c].text||""); } return m; },
      setFromMatrix:function(m){ this.rows=Math.max(2,m.length); this.cols=Math.max(2,(m[0]?m[0].length:2)); this.build(); for(var r=0;r<m.length;r++) for(var c=0;c<m[r].length;c++) this.cells[r][c].text=String(m[r][c]); },
      toCSV:function(){ var m=this.matrix(), out=[], r,c,row; for(r=0;r<m.length;r++){ row=[]; for(c=0;c<m[r].length;c++){ var v=String(m[r][c]); if(v.indexOf(",")>=0||v.indexOf('"')>=0) v='"'+v.replace(/"/g,'""')+'"'; row.push(v);} out.push(row.join(",")); } return out.join("\n"); },
      fromCSV:function(csv){ var lines=String(csv||"").replace(/\r/g,"\n").split(/\n+/).filter(function(s){return TRIM(s).length>0;}); function split(line){ var p=String(line).split(/,(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/); for(var i=0;i<p.length;i++) p[i]=p[i].replace(/^\"|\"$/g,"").replace(/\"\"/g,'"'); return p;} if(!lines.length)return; var m=[],i; for(i=0;i<lines.length;i++) m.push(split(lines[i])); this.setFromMatrix(m); },
      transpose:function(){ var m=this.matrix(), tm=[],r,c; for(c=0;c<this.cols;c++){ tm[c]=[]; for(r=0;r<this.rows;r++) tm[c][r]=m[r][c]; } this.setFromMatrix(tm); }
    };

    var bar=dlg.add("group"); bar.orientation="row";
    var bRm=bar.add("button",undefined,"– Row"), bRp=bar.add("button",undefined,"+ Row"),
        bCm=bar.add("button",undefined,"– Col"), bCp=bar.add("button",undefined,"+ Col"),
        bImp=bar.add("button",undefined,"Import"), bExp=bar.add("button",undefined,"Export"),
        bPaste=bar.add("button",undefined,"Paste"), bCopy=bar.add("button",undefined,"Copy"),
        bTrans=bar.add("button",undefined,"Transpose"), bSample=bar.add("button",undefined,"Sample"), bPie=bar.add("button",undefined,"Sample Pie 100%"), bClear=bar.add("button",undefined,"Clear");

    var act=dlg.add("group"); act.alignment="right"; act.add("button",undefined,"Cancel"); var ok=act.add("button",undefined,"OK");

    bRm.onClick=function(){ if(grid.rows>2){ grid.rows--; grid.build(); } };
    bRp.onClick=function(){ grid.rows++; grid.build(); };
    bCm.onClick=function(){ if(grid.cols>2){ grid.cols--; grid.build(); } };
    bCp.onClick=function(){ grid.cols++; grid.build(); };
    bPaste.onClick=function(){ var d=new Window("dialog","Paste CSV"); var ed=d.add("edittext",undefined,"",{multiline:true,scrollable:true}); ed.preferredSize=[420,200]; d.add("button",undefined,"Cancel"); var okb=d.add("button",undefined,"OK"); if(d.show()==1){ grid.lastCSV=grid.toCSV(); grid.fromCSV(ed.text); } };
    bCopy.onClick=function(){ var d=new Window("dialog","Copy CSV"); d.add("edittext",undefined,grid.toCSV(),{multiline:true,readonly:true,scrollable:true}).preferredSize=[420,200]; d.add("button",undefined,"Close"); d.show(); };
    bImp.onClick=function(){ var f=File.openDialog("CSV"); if(f){ f.open("r"); var s=f.read(); f.close(); grid.lastCSV=grid.toCSV(); grid.fromCSV(s);} };
    bExp.onClick=function(){ var f=File.saveDialog("Save CSV","CSV:*.csv"); if(f){ f.open("w"); f.write(grid.toCSV()); f.close(); } };
    bTrans.onClick=function(){ grid.lastCSV=grid.toCSV(); grid.transpose(); };
    bSample.onClick=function(){ grid.lastCSV=grid.toCSV(); grid.fromCSV(",Series A,Series B,Series C\nCat 1,10,20,15\nCat 2,30,25,18\nCat 3,22,17,29\nCat 4,18,34,26"); };
    bPie.onClick=function(){ grid.lastCSV=grid.toCSV(); grid.fromCSV(",Share\nRetail,35\nOffice,25\nHospitality,20\nIndustrial,20"); };
    bClear.onClick=function(){ grid.lastCSV=grid.toCSV(); grid.setFromMatrix([["","S1"],["Cat 1",""],["Cat 2",""]]); };

    grid.build(); if(initialCSV) grid.fromCSV(initialCSV);
    return (dlg.show()==1) ? grid.toCSV() : null;
  }

  function csvToData(csv){
    var lines=String(csv||"").replace(/\r/g,"\n").split(/\n+/).filter(function(s){return TRIM(s).length>0;});
    function split(line){ var p=String(line).split(/,(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/); for(var i=0;i<p.length;i++) p[i]=p[i].replace(/^\"|\"$/g,"").replace(/\"\"/g,'"'); return p;}
    var M=[],i; for(i=0;i<lines.length;i++) M.push(split(lines[i])); if(M.length<2||M[0].length<2) throw Error("Need at least 1 series and 1 category.");
    var cats=[], names=[], S=[], r,c;
    for(c=1;c<M[0].length;c++) names.push(M[0][c]);
    for(r=1;r<M.length;r++) cats.push(M[r][0]);
    for(c=1;c<M[0].length;c++){ var arr=[]; for(r=1;r<M.length;r++){ var v=parseFloat(TRIM(M[r][c])); arr.push(isNaN(v)?0:v);} S.push(arr); }
    return {categories:cats, seriesNames:names, series:S};
  }
  function toPercent100(d){
    var cats=d.categories, S=d.series, out=[], s,i; for(s=0;s<S.length;s++) out[s]=[];
    for(i=0;i<cats.length;i++){ var sum=0; for(s=0;s<S.length;s++) sum+=Math.max(0,S[s][i]); if(sum<=0) sum=1; for(s=0;s<S.length;s++) out[s][i]=(S[s][i]/sum)*100; }
    return {categories:cats.slice(0), seriesNames:d.seriesNames.slice(0), series:out};
  }

  // ---------- axes & legend ----------
  function axes(p,lay,b,axisLeft,maxVal,ticks,showPct){
    var it=[], t=b[0], l=b[1], bt=b[2], r=b[3], axisX=axisLeft?l:r;
    // stroke-free axis: we only place labels
    for(var i=0;i<=ticks;i++){
      var val=(maxVal/ticks)*i, yy=bt-((bt-t)*(val/maxVal));
      var tf=addText(p,lay,{geometricBounds:[yy-6, axisLeft?axisX-38:axisX+6, yy+6, axisLeft?axisX-6:axisX+42], contents: showPct? (Math.round(val)+"%") : (val.toFixed(0))});
      try{ tf.parentStory.pointSize=9; tf.textFramePreferences.verticalJustification=VerticalJustification.CENTER_ALIGN; }catch(e){}
      it.push(tf);
    }
    return it;
  }
  function legend(p,lay,x,y,labels,sws){
    var it=[], cx=x, gap=10;
    for(var i=0;i<labels.length;i++){
      var chip=addRect(p,lay,{geometricBounds:[y,cx,y+8,cx+14]}); setRectStyle(chip,sws[i%sws.length]); it.push(chip);
      var tf=addText(p,lay,{geometricBounds:[y-2,cx+18,y+10,cx+220], contents: labels[i]});
      try{ tf.parentStory.pointSize=9; tf.texts[0].justification=Justification.centerAlign; tf.textFramePreferences.verticalJustification=VerticalJustification.CENTER_ALIGN; }catch(e){}
      it.push(tf); cx += 18 + (tf.geometricBounds[3]-tf.geometricBounds[1]) + gap;
    }
    return it;
  }

  // ---------- renderers ----------
  function columnsLike(stacked){
    return function(p,lay,b,d,sws,axisLeft,colPct,cluPct,shadow,legendTop,pctMode,rowFront,colFront){
      var cats=d.categories, _d=(pctMode&&stacked)?toPercent100(d):d, S=_d.series, names=d.seriesNames, sCnt=S.length, cCnt=cats.length;
      var max= (pctMode&&stacked)?100 : (function(){var m=0; for(var s=0;s<sCnt;s++) for(var i=0;i<cCnt;i++) if(S[s][i]>m) m=S[s][i]; return niceMax(m);}());
      var it=axes(p,lay,b,axisLeft,max,5,(pctMode&&stacked));
      var t=b[0], l=b[1], bt=b[2], r=b[3], W=r-l, H=bt-t;
      if(legendTop){ it=it.concat(legend(p,lay,l,t-14,names,sws)); t+=20; b[0]=t; H=bt-t; }
      var span=W/cCnt, clu=span*(cluPct/100), cw=(stacked?clu:(clu/sCnt))*(colPct/100);
      var i, s, left, y, h, x, y2, h2, x2;
      for(i=0;i<cCnt;i++){
        left=l+i*span+(span-clu)/2;
        if(!stacked){
          for(s=0;s<sCnt;s++){
            h=(S[s][i]/max)*H; x=left+s*(clu/sCnt)+((clu/sCnt)-cw)/2;
            setRectStyle(addRect(p,lay,{geometricBounds:[bt-h,x,bt,x+cw]}),sws[s%sws.length]);
          }
        }else{
          y=bt;
          for(s=0;s<sCnt;s++){
            h2=(S[s][i]/max)*H; x2=left+(clu-cw)/2;
            setRectStyle(addRect(p,lay,{geometricBounds:[y-h2,x2,y,x2+cw]}),sws[s%sws.length]); y-=h2;
          }
        }
        var lab=addText(p,lay,{geometricBounds:[bt+2,left,bt+14,left+clu], contents:String(cats[i])});
        try{ lab.parentStory.pointSize=9; lab.texts[0].justification=Justification.centerAlign; }catch(e){} 
      }
      return it;
    };
  }
  function barsLike(stacked){
    return function(p,lay,b,d,sws,axisLeft,colPct,cluPct,shadow,legendTop,pctMode,rowFront,colFront){
      var cats=d.categories, _d=(pctMode&&stacked)?toPercent100(d):d, S=_d.series, names=d.seriesNames, sCnt=S.length, cCnt=cats.length;
      var max= (pctMode&&stacked)?100 : (function(){var m=0; for(var s=0;s<sCnt;s++) for(var i=0;i<cCnt;i++) if(S[s][i]>m) m=S[s][i]; return niceMax(m);}());
      var it=axes(p,lay,b,axisLeft,max,5,(pctMode&&stacked));
      var t=b[0], l=b[1], bt=b[2], r=b[3], W=r-l, H=bt-t;
      if(legendTop){ it=it.concat(legend(p,lay,l,t-14,names,sws)); t+=20; b[0]=t; H=bt-t; }
      var span=H/cCnt, clu=span*(cluPct/100), bh=(stacked?clu:(clu/sCnt))*(colPct/100);
      var i,s,top,w,y0,acc,w2;
      for(i=0;i<cCnt;i++){
        top=t+i*span+(span-clu)/2;
        if(!stacked){
          for(s=0;s<sCnt;s++){
            w=(S[s][i]/max)*W; y0=top+s*(clu/sCnt)+((clu/sCnt)-bh)/2;
            setRectStyle(addRect(p,lay,{geometricBounds:[y0,l,y0+bh,l+w]}),sws[s%sws.length]);
          }
        }else{
          acc=0; y0=top+(clu-bh)/2;
          for(s=0;s<sCnt;s++){
            w2=(S[s][i]/max)*W;
            setRectStyle(addRect(p,lay,{geometricBounds:[y0,l+acc,y0+bh,l+acc+w2]}),sws[s%sws.length]); acc+=w2;
          }
        }
        var lab=addText(p,lay,{geometricBounds:[top, r+6, top+clu, r+120], contents:String(cats[i])});
        try{ lab.parentStory.pointSize=9; lab.textFramePreferences.verticalJustification=VerticalJustification.CENTER_ALIGN; }catch(e){} 
      }
      return it;
    };
  }
  function lineOrArea(isArea){
    return function(p,lay,b,d,sws){
      var sCnt=d.series.length, cCnt=d.categories.length, max=0,i,s;
      for(s=0;s<sCnt;s++) for(i=0;i<cCnt;i++) if(d.series[s][i]>max) max=d.series[s][i];
      max=niceMax(max);
      var it=[], t=b[0], l=b[1], bt=b[2], r=b[3], W=r-l, H=bt-t, step=(cCnt<=1)?W:W/(cCnt-1);
      for(s=0;s<sCnt;s++){
        var pts=[], x, y;
        for(i=0;i<cCnt;i++){ x=l+i*step; y=bt-(d.series[s][i]/max)*H; pts.push([x,y]); }
        if(isArea){
          var poly=addPoly(p,lay,{}); var ap=pts.slice(0); ap.push([l+(cCnt-1)*step, bt]); ap.push([l,bt]); poly.paths[0].entirePath=ap; poly.fillColor=sws[s%sws.length];
        }else{
          for(i=0;i<pts.length-1;i++){ var ln=addLine(p,lay,{geometricBounds:[pts[i][1],pts[i][0],pts[i+1][1],pts[i+1][0]]}); ln.strokeWeight=0; ln.fillColor=sws[s%sws.length]; }
        }
      }
      for(i=0;i<cCnt;i++){ var tf=addText(p,lay,{geometricBounds:[bt+2,l+i*step-20,bt+14,l+i*step+20], contents:String(d.categories[i])}); try{ tf.parentStory.pointSize=9; tf.texts[0].justification=Justification.centerAlign; }catch(e){} }
      return it;
    };
  }

  // ======== NEW Pie (percent labels, 100% total, start at 12 o’clock) ========
  function pieChart(p,lay,b,d,sws){
    var cats=d.categories, S=d.series, vals=[], i,s;
    if(S.length===1){ vals=S[0].slice(0); }
    else { for(i=0;i<cats.length;i++){ var sum=0; for(s=0;s<S.length;s++) sum+=S[s][i]; vals.push(sum); } }

    // sum & percentages
    var total=0; for(i=0;i<vals.length;i++) total+=Math.max(0,vals[i]); if(total<=0) total=1;
    var perc=[], sumP=0;
    for(i=0;i<vals.length;i++){ var pcent=(vals[i]/total)*100; perc.push(pcent); sumP+=pcent; }
    // numerical rounding guard: last slice fixes any rounding drift so sum shows 100.0
    if(perc.length>0){ var drift=100-sumP; perc[perc.length-1]+=drift; }

    var it=[], cx=(b[1]+b[3])/2, cy=(b[0]+b[2])/2, R=Math.min((b[3]-b[1]),(b[2]-b[0]))*0.40, start=-90; // start at top
    function rad(dg){return (Math.PI/180)*dg;}
    function arcPts(cx,cy,rr,a0,a1){ var step=Math.max(12,Math.round((a1-a0)/6)), pts=[[cx,cy]]; var a; for(a=a0;a<=a1;a+=(a1-a0)/step){ pts.push([cx+rr*Math.cos(rad(a)), cy+rr*Math.sin(rad(a))]); } pts.push([cx,cy]); return pts; }

    for(i=0;i<vals.length;i++){
      var ang=360*(perc[i]/100.0);
      var poly=addPoly(p,lay,{}); poly.paths[0].entirePath=arcPts(cx,cy,R,start,start+ang); poly.fillColor=sws[i%sws.length]; it.push(poly);

      // label: “Category — 23%”
      var mid=start+ang/2, lx=cx+(R+18)*Math.cos(rad(mid)), ly=cy+(R+18)*Math.sin(rad(mid));
      var label = cats[i] + " — " + Math.round(perc[i]) + "%";
      var tf=addText(p,lay,{geometricBounds:[ly-7,lx-60,ly+7,lx+60], contents:label});
      try{
        tf.parentStory.pointSize=9;
        tf.texts[0].justification=Justification.centerAlign;
        tf.textFramePreferences.verticalJustification=VerticalJustification.CENTER_ALIGN;
      }catch(e){}
      it.push(tf);

      start+=ang;
    }
    return it;
  }

  var RENDER={
    "Column":        columnsLike(false),
    "StackedColumn": columnsLike(true),
    "Bar":           barsLike(false),
    "StackedBar":    barsLike(true),
    "Line":          lineOrArea(false),
    "Area":          lineOrArea(true),
    "Pie":           pieChart
  };

  // ---------- persist ----------
  var PREF="INWIZ_";
  function saveCfg(grp,cfg){ grp.insertLabel(PREF+"has","1"); for(var k in cfg) if(cfg.hasOwnProperty(k)) grp.insertLabel(PREF+k,String(cfg[k])); }
  function loadCfg(grp){
    if(grp.extractLabel(PREF+"has")!=="1") return null;
    function asBool(s){ return String(s)==="1"||String(s).toLowerCase()==="true"; }
    function asNum(s,fb){ var n=parseFloat(s); return isNaN(n)?fb:n; }
    var btxt=grp.extractLabel(PREF+"bounds"), b=btxt?btxt.split(","):null; if(b&&b.length===4) for(var i=0;i<4;i++) b[i]=parseFloat(b[i]);
    return {
      chartType: grp.extractLabel(PREF+"chartType")||"Column",
      axisLeft:  asBool(grp.extractLabel(PREF+"axisLeft")||"1"),
      valueMode: grp.extractLabel(PREF+"valueMode")||"Numbers",
      addShadow: asBool(grp.extractLabel(PREF+"addShadow")||"0"),
      legendTop: asBool(grp.extractLabel(PREF+"legendTop")||"0"),
      rowFront:  asBool(grp.extractLabel(PREF+"rowFront")||"0"),
      colFront:  asBool(grp.extractLabel(PREF+"colFront")||"1"),
      colPct:    asNum(grp.extractLabel(PREF+"colPct"),90),
      cluPct:    asNum(grp.extractLabel(PREF+"cluPct"),80),
      bounds:    b || grp.geometricBounds,
      dataText:  grp.extractLabel(PREF+"dataText") || ""
    };
  }

  // ---------- tiny dialog ----------
  var dlg=new Window("dialog","Graph Type"); dlg.orientation="column"; dlg.alignChildren="fill"; dlg.margins=10;

  var menu=dlg.add("dropdownlist",undefined,["Graph Options ▾","Edit Data…","Sample Data","Sample Pie 100%","Clear Data","Import CSV…","Export CSV…"]); menu.selection=0;
  menu.onChange=function(){
    if(menu.selection.index<=0){menu.selection=0;return;}
    var idx=menu.selection.index;
    if(idx===1){ var n=openDataDialog(dataCSV); if(n!==null) dataCSV=n; }
    if(idx===2){ dataCSV=",Series A,Series B,Series C\nCat 1,10,20,15\nCat 2,30,25,18\nCat 3,22,17,29\nCat 4,18,34,26"; }
    if(idx===3){ dataCSV=",Share\nRetail,35\nOffice,25\nHospitality,20\nIndustrial,20"; }
    if(idx===4){ dataCSV=""; }
    if(idx===5){ var f=File.openDialog("CSV"); if(f){ f.open("r"); dataCSV=f.read(); f.close(); } }
    if(idx===6){ var f2=File.saveDialog("Save CSV","CSV:*.csv"); if(f2){ f2.open("w"); f2.write(dataCSV||""); f2.close(); } }
    menu.selection=0;
  };

  var typeP=dlg.add("panel",undefined,"Type"); typeP.alignChildren="left"; typeP.margins=8;
  var typeRow=typeP.add("group"); typeRow.orientation="row"; typeRow.spacing=6;
  var types=["Column","StackedColumn","Bar","StackedBar","Line","Area","Pie"], rb=[]; 
  for (var i=0;i<types.length;i++){ var r=typeRow.add("radiobutton",undefined,types[i]); r.size=[90,18]; rb.push(r); }
  rb[0].value=true;
  var axisG=typeP.add("group"); axisG.add("statictext",undefined,"Value Axis:"); var axisDrop=axisG.add("dropdownlist",undefined,["On Left Side","On Right Side"]); axisDrop.selection=0;

  var styleP=dlg.add("panel",undefined,"Style"); styleP.margins=8; styleP.alignChildren="left";
  var ckShadow=styleP.add("checkbox",undefined,"Add Drop Shadow");
  var ckLegend=styleP.add("checkbox",undefined,"Add Legend Across Top");
  var ckRowFront=styleP.add("checkbox",undefined,"First Row in Front");
  var ckColFront=styleP.add("checkbox",undefined,"First Column in Front"); ckColFront.value=true;

  var optP=dlg.add("panel",undefined,"Options"); optP.margins=8; optP.alignChildren="left";
  var g1=optP.add("group"); g1.add("statictext",undefined,"Column Width:"); var etCol=g1.add("edittext",undefined,"90%"); etCol.characters=5;
  var g2=optP.add("group"); g2.add("statictext",undefined,"Cluster Width:"); var etClu=g2.add("edittext",undefined,"80%"); etClu.characters=5;

  var act=dlg.add("group"); act.alignment="right";
  var cancel=act.add("button",undefined,"Cancel");
  var ok=act.add("button",undefined,"OK");

  var okPressed=false;
  ok.onClick=function(){
    if(!dataCSV){ // auto-sample if user never set data
      dataCSV=",Series A,Series B,Series C\nCat 1,10,20,15\nCat 2,30,25,18\nCat 3,22,17,29\nCat 4,18,34,26";
    }
    okPressed=true; dlg.close(1);
  };

  if (dlg.show()!=1 || !okPressed) return;

  // gather params after closing dialog (avoids UI-in-undo issues)
  function currentType(){ for(var i=0;i<types.length;i++) if(rb[i].value) return types[i]; return "Column"; }
  var P = {
    chartType: currentType(),
    axisLeft: (axisDrop.selection.index===0),
    valueMode: "Numbers",
    addShadow: ckShadow.value,
    legendTop: ckLegend.value,
    rowFront: ckRowFront.value,
    colFront: ckColFront.value,
    colPct: pct(etCol.text,90),
    cluPct: pct(etClu.text,80),
    bounds: selectionBounds(),
    dataText: dataCSV
  };

  var doc=app.activeDocument, lay=ensureLayer(doc), sws=palette(doc), parent=getParent(), data;
  try{ data=csvToData(P.dataText); }catch(e){ alert("Data error: "+e.message); return; }

  function drawFromData(parent, layer, P, data, sws){
    return RENDER[P.chartType](parent, layer, P.bounds.slice(0), data, sws, P.axisLeft, P.colPct, P.cluPct, P.addShadow, P.legendTop, false, P.rowFront, P.colFront);
  }

  app.doScript(function(){
    if(app.selection.length && app.selection[0].extractLabel){
      var grp=app.selection[0], cfg=loadCfg(grp);
      if(cfg){ P.bounds=grp.geometricBounds; while(grp.allPageItems.length) try{ grp.allPageItems[0].remove(); }catch(_){}
        var items=drawFromData(parent, lay, P, data, sws); for(var i=0;i<items.length;i++) try{ items[i].move(grp, LocationOptions.AT_END); }catch(_){}
        saveCfg(grp,P); return;
      }
    }
    var items2=drawFromData(parent, lay, P, data, sws); if(!items2.length) throw Error("Nothing to draw.");
    var grp2=parent.groups.add(items2); grp2.itemLayer=lay; saveCfg(grp2,P);
  }, ScriptLanguage.JAVASCRIPT, undefined, UndoModes.ENTIRE_SCRIPT, "INWIZ Graph");

})();