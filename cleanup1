#target "indesign"
#targetengine "session"
/*
  INWIZ_CenterClean_RemoveHash.jsx
  Mustafa Khan + GPT-5 Thinking — 2025
  InDesign 2022–2025 (Win/Mac)

  What it does:
  • Removes placeholder lines made of '#', and stray '#'
  • Removes leading/trailing/extra returns; collapses multiple returns
  • Sets vertical justification = CENTER for frames (middle align)
  • Optional: center horizontally (paragraph justification)

  Scope:
  • If you have text frames selected → only those stories/frames.
  • Else → all text frames in the document (threaded safely once per story).
*/

(function () {
  if (app.documents.length === 0) { alert("Open a document first."); return; }
  var doc = app.activeDocument;

  // ===== CONFIG (edit if needed) =====
  var CONFIG = {
    removeHashLinesOnly: true,  // delete paragraphs that are only '#' (any count)
    removeAllHashes: true,      // also strip stray '#' characters anywhere
    collapseMultiReturns: true, // \r{2,} → \r
    trimLeadingReturns: true,   // remove returns at the very start of the story
    trimTrailingReturns: true,  // remove returns at the very end of the story
    centerHorizontal: false,    // set paragraphs to Center (LEFT if false)
    touchMasterStories: false   // include master-page stories when running "all"
  };
  // ===== END CONFIG =====

  // --- helpers ---
  function resetGrep(){
    app.findGrepPreferences = NothingEnum.nothing;
    app.changeGrepPreferences = NothingEnum.nothing;
  }
  function changeInTarget(target, findPat, changeTo){
    resetGrep();
    app.findGrepPreferences.findWhat = findPat;
    app.changeGrepPreferences.changeTo = changeTo;
    var n = 0;
    try {
      if (target && target.changeGrep) {
        n = target.changeGrep().length;
      } else if (doc && doc.changeGrep) {
        n = doc.changeGrep().length;
      }
    } catch(e){}
    resetGrep();
    return n;
  }

  function uniqueStoriesFromSelection(){
    var i, s = [], seen = {};
    var sel = app.selection;
    if (!sel || sel.length === 0) return null;

    function addStory(st){
      if (!st || !st.isValid) return;
      var id = st.id;
      if (!seen[id]) { seen[id] = true; s.push(st); }
    }

    for (i=0; i<sel.length; i++){
      var it = sel[i];
      try {
        if (it.constructor.name === "TextFrame") {
          addStory(it.parentStory);
        } else if (it.hasOwnProperty("parentStory")) {
          addStory(it.parentStory);
        } else if (it.constructor.name === "Story") {
          addStory(it);
        }
      } catch(e){}
    }
    return s.length ? s : null;
  }

  function allStories(){
    var arr = [], i, st = doc.stories;
    for (i=0; i<st.length; i++){
      try {
        if (!CONFIG.touchMasterStories && st[i].parentPage === null) continue; // skip masters if desired
        arr.push(st[i]);
      } catch(e){ arr.push(st[i]); } // be permissive
    }
    return arr;
  }

  function allTextFrames(){
    var tfs = [], i, a = doc.textFrames;
    for (i=0; i<a.length; i++){
      try {
        if (!CONFIG.touchMasterStories && a[i].parentPage === null) continue;
        tfs.push(a[i]);
      } catch(e){ tfs.push(a[i]); }
    }
    return tfs;
  }

  function verticalCenterSelectedFrames(frames){
    var i, n=0;
    for (i=0; i<frames.length; i++){
      var tf = frames[i];
      if (!tf.isValid) continue;
      try {
        var tfp = tf.textFramePreferences;
        tfp.firstBaselineOffset = FirstBaseline.LEADING_OFFSET; // safe baseline for centering
        tfp.verticalJustification = VerticalJustification.CENTER_ALIGN;
        n++;
      } catch(e){}
    }
    return n;
  }

  function centerParagraphs(stories){
    var i, n=0, j;
    for (i=0; i<stories.length; i++){
      try {
        var paras = stories[i].paragraphs;
        paras.everyItem().justification = CONFIG.centerHorizontal ? Justification.CENTER_ALIGN : Justification.LEFT_ALIGN;
        n += paras.length;
      } catch(e){}
    }
    return n;
  }

  // --- main ---
  app.doScript(function(){
    var stories = uniqueStoriesFromSelection();
    var framesForVJ;

    if (stories) {
      // limit to selected stories/frames
      framesForVJ = [];
      for (var i=0; i<app.selection.length; i++){
        if (app.selection[i] instanceof TextFrame) framesForVJ.push(app.selection[i]);
      }
      if (framesForVJ.length === 0) {
        // collect frames from the selected stories (first text container of each story)
        framesForVJ = [];
        for (i=0; i<stories.length; i++){
          try { framesForVJ.push(stories[i].textContainers[0]); } catch(e){}
        }
      }
    } else {
      // whole document
      stories = allStories();
      framesForVJ = allTextFrames();
    }

    // cleanup per story (so GREP stays scoped)
    var changes = { hashLines:0, strayHash:0, multiR:0, leadR:0, trailR:0, paraJust:0, framesVJ:0 };

    for (var s=0; s<stories.length; s++){
      var st = stories[s];
      if (!st || !st.isValid) continue;

      // 1) remove lines that are only hashes (e.g., "#", "##", "  #  ")
      if (CONFIG.removeHashLinesOnly) {
        // ^\s*#+\s*\r  →  (nothing)
        changes.hashLines += changeInTarget(st, "^\\s*#+\\s*\\r", "");
      }
      // 2) remove stray '#' anywhere (after removing pure lines)
      if (CONFIG.removeAllHashes) {
        changes.strayHash += changeInTarget(st, "#", "");
      }
      // 3) trim leading returns at story start
      if (CONFIG.trimLeadingReturns) {
        // beginning of story \A followed by returns
        changes.leadR += changeInTarget(st, "\\A\\r+", "");
      }
      // 4) trim trailing returns at story end
      if (CONFIG.trimTrailingReturns) {
        // one or more returns at end → single empty (remove entirely)
        changes.trailR += changeInTarget(st, "\\r+\\z", "");
      }
      // 5) collapse multiple returns inside
      if (CONFIG.collapseMultiReturns) {
        changes.multiR += changeInTarget(st, "\\r{2,}", "\\r");
      }
    }

    // 6) vertical center all relevant frames
    changes.framesVJ = verticalCenterSelectedFrames(framesForVJ);

    // 7) (optional) horizontal center/left for those stories
    changes.paraJust = centerParagraphs(stories);

    // report
    alert(
      "INWIZ CenterClean — Done\n\n" +
      "Hash-only lines removed: " + changes.hashLines + "\n" +
      "Stray '#' removed: " + changes.strayHash + "\n" +
      "Leading returns trimmed: " + changes.leadR + "\n" +
      "Trailing returns trimmed: " + changes.trailR + "\n" +
      "Multiple returns collapsed: " + changes.multiR + "\n" +
      "Frames set to Vertical Center: " + changes.framesVJ + "\n" +
      "Paragraphs justification updated: " + changes.paraJust + "\n"
    );

  }, ScriptLanguage.JAVASCRIPT, undefined, UndoModes.ENTIRE_SCRIPT, "INWIZ CenterClean RemoveHash");

})();